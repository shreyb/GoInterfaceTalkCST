# Go Interfaces and Testing
DATE TODO

Shreyas Bhat
CST Group Meeting

## Vocabulary
- Go has no classes like python, C++, etc.
- Go has *types*
- *type*: "A type determines a set of values together with operations and methods specific to those values" (`int`, `string`, custom types)
- *receiver*: Special parameter that allows you to associate a function with a type. This is the closest to classes we get in Go.
- *method*: A function with a special *receiver* argument.  
`func myFunc (a myType, b string) <==> func (a myType) myMethod(b string)`

## Interfaces
- *interface type*: "A set of method signatures.  A value of interface type can hold any value that implements those methods"
- In Go, a type implements an interface *implicitly* if it has the interface's methods defined
```go
type Animal interface {
    Speak()
}

type Dog struct{}

func (d Dog) Speak() { println("Woof!")}

type Flower struct{ 
    heightcm float64
}

func (f Flower) Grow(t time) {f.heightcm += 1}
```

- In this example, `Dog` implements the `Animal` interface, but `Flower` does not

## Interfaces (2)

- This is important because we can use the interface type in place of the underlying type for more flexibility.
- Instead of 
```go
func DogGreeting(d Dog) {
    d.Speak()
}
```
we have
```go
func AnimalGreeting(a Animal) {
    a.Speak()
}
```
and we can pass in a `Dog` to `AnimalGreeting`.  Or a `Cat`, if we define its `Speak()` method.

## Demo of Dogs and Cats
.play catsanddogs/main.go /^//START OMIT/,/^//END OMIT/ 

## Let's jump right to the problem at hand
- We need a function that sends an email when you pass in a non-empty message
- Simple solution:
```go
func sendEmail(from string, to []string, subj string, msg string) error
```
- You might implement it as follows

.code sendEmailSimple.go /^//START CUT 1 OMIT/,/^//END CUT 1 OMIT/ 

## And call it like this:
.code sendEmailSimple.go  /^func main/,/^}/ 

## How do we test this logic?
- You COULD just be OK with an email getting sent to you
- Empty string case:

.code sendEmailSimple_test.go /^//START CUT 1 OMIT/,/^//END CUT 1 OMIT/ 

## How do we test this logic (2)?
- "Good case"

.code sendEmailSimple_test.go /^//START CUT 2 OMIT/,/^//END CUT 2 OMIT/ 


## This is obviously clunky
- Requires me to check my email?!?!
- Also, DOE may not like my real email being there if I want to put this test into a github action

## Go Interfaces in action

## Mocking sending of the email!
- So we want to test `sendEmail` WITHOUT sending an actual email each time
- You can reconfigure postfix and all
- But it's nicer if you can mock this
- Whereas python has `unittest.mock` and `pytest.monkeypatch`, etc., idiomatic Go encourages using *interfaces* for external dependencies like this


## Define an emailConfig type

.code sendEmailABitDifferent.go /^//START TYPEDEF OMIT/,/^//END TYPEDEF OMIT/ 

- And also a method on that type that sends the email:

```go
func (e *emailConfig) sendMessage(msg string) error
```

## Putting that all together
.code sendEmailABitDifferent.go /^//START CUT 1 OMIT/,/^//END CUT 1 OMIT/ 

## Putting that all together (2)
.code sendEmailABitDifferent.go /^//START CUT 2 OMIT/,/^//END CUT 2 OMIT/ 

- But we have the same problem.  We can't test it without actually sending an email.  

## So now, we define an interface

```go
type MessageSender interface {
	sendMessage(string) error
}
```
- Any type that has a `sendMessage(string) error` method implements this interface automatically.
- Check it out - our `*emailConfig` type implements it!  
- So we can introduce a function that uses this interface and move the logic there

## New Function that takes the interface as a parameter

```go
func SendMessageIfNotBlank(m MessageSender, msg string) error {
	if msg == "" {
		log.Info("Empty message - not sending anything")
		return errEmptyMessage
	}
	return m.sendMessage(msg)
}
```

## Bonus: Isolation of logic
- This refactoring allows us to isolate email-sending code for `emailConfig` type
```go
func (e *emailConfig) sendMessage(msg string) {
	err := sendTheEmail(msg)
	return err  	
}
```
- *VERY* common pattern in Go, especially if you want to handle the returned error from `sendTheEmail`

## Putting it all together - again
.code sendMessageFinal.go /^//START CUT 1 OMIT/,/^//END CUT 1 OMIT/ 

## Putting it all together - again (2)
.code sendMessageFinal.go /^//START CUT 2 OMIT/,/^//END CUT 2 OMIT/ 

## What we get
- Now, our MessageSender can be anything at all!  
- This also gives us a VERY easy way to mock sending an email if it's not blank, because remember, we want to test the logic
- How?  We now just plug in our own fake `emailConfig`!

## Testing SendMessageIfNotBlank 

## fakeEmailConfig:

.code sendmessage/sendMessageFinal_test.go /^//START TYPEDEF OMIT/,/^//END TYPEDEF OMIT/ 
- Note that calling `*fakeEmailConfig.sendMessage()` doesn't actually send an email!

## Tests using fakeEmailConfig
.code sendmessage_test/sendMessageFinal_test.go /^func TestSendMessageIfNotBlankEmptyString/,/^}/
.code sendmessage_test/sendMessageFinal_test.go /^func TestSendMessageIfNotBlankWithString/,/^}/

## Let's actually run those tests:
.play sendmessage_test/sendMessageFinal_test.go /^func main/,/^}/
- Note: This is not how you actually run tests in Go.  This is just how you can programmatically run go tests as if they were an executable Go script outside of the go tooling
- From within a Go codebase, simply run `go test` to run the tests.

## Final Cool Things

## We can now make ANYTHING send a message
- e.g. We can implement a `slackMessage` type that defines in its `sendMessage` method how to send a slack message:

```go
type slackMessage struct {
	webhookURL string
}

func (s *slackMessage) sendMessage(msg string) error {
	err := sendTheWebRequest(msg)
	return err
}
```

Now you can send a slack message by calling: 

```go
s := &slackMessage("https://slack.com/somethingorother/12345677")
SendMessageIfNotBlank(s, "This is a slack message")
```

- This is actually how emailing and slack messaging is implemented in Managed Proxies and Managed Tokens.

## Table-driven testing in Go

- We can condense the testing using table-driven tests, and even check our error logic within `SendMessageIfNotBlankEmptyString`:
- Defined types `goodEmailConfig`, `badEmailConfig` that will return nil/non-nil errors when their `sendMessage` methods are called:

.code sendmessage_final_test/sendMessageFinal_test.go /^//START CUT 1 OMIT/,/^//END CUT 1 OMIT/ 

## Table-driven testing in Go (2)

- Now, define a `testCase` type that contains all the necessary info (very much like using `pytest.mark.parametrize` in python...but clearer)

.code sendmessage_final_test/sendMessageFinal_test.go /START TYPEDEF OMIT/,/END TYPEDEF OMIT/ 

## Table-driven testing in Go (3)
- And define your test cases:

.code sendmessage_final_test/sendMessageFinal_test.go /START TESTCASES1 OMIT/,/END TESTCASES1 OMIT/ 

- We wouldn't have been able to do the highlighted case before

##

.code sendmessage_final_test/sendMessageFinal_test.go /START TESTCASES2 OMIT/,/END TESTCASES2 OMIT/ 
- The last error is what we should get based on our mock of *badEmail.sendMessage

## The actual test:

.code sendmessage_final_test/sendMessageFinal_test.go /START TEST OMIT/,/END TEST OMIT/ 

## 
- t.Run has the signature 
```go
func (t *testing.T) Run(string, func(*testing.T)) bool
```
- One can check the return value, or simply call T.Fatal or T.Error from inside the test
- Note that in our `switch` statement, we're defining our test failure modes

## Final thoughts on testing
- Not only are we able to test the email sending logic without somehow messing with email settings on the host, but this is also a true, safe unit test that can be deployed, for example, in GitHub Actions.
- We also got two extra tests by implementing the interface with a "badEmailConfig" that purposefully returns a non-nil error!